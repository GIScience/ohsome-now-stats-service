package org.heigit.ohsome.now.statsservice

import org.heigit.ohsome.now.statsservice.topic.*
import org.junit.jupiter.api.Test
import java.io.File
import java.time.Instant.now
import java.time.temporal.ChronoUnit.HOURS
import java.time.temporal.ChronoUnit.SECONDS


class TopicSqlGenerator {

    private val fourHoursLater = now()
        .plus(4, HOURS)
        .truncatedTo(SECONDS)
        .toString()

    private val path = "sql_topics_generated/"


    @Test
    fun `create topic SQL for all topics`() = topics
        .values
        .forEach(::writeSql)


    fun writeSql(definition: TopicDefinition) {
        writeDDLs(definition)
        writeInserts(definition)
    }


    private fun writeDDLs(definition: TopicDefinition) {
        val file = getFile("DDL", definition)

        val text = createDDLCommands(definition)
        file.writeText(text)
    }

    private fun writeInserts(definition: TopicDefinition) {
        val file = getFile("INSERT", definition)

        val text = createInsertCommands(definition)
        file.writeText(text)
    }


    private fun createDDLCommands(definition: TopicDefinition) = comment() +
            createTableDDL(definition) + "\n\n" +
            createMVDDL(definition, fourHoursLater)


    private fun createInsertCommands(definition: TopicDefinition) = comment() +
            createInsertStatement(definition, fourHoursLater)


    private fun comment() = "-- generated by " + TopicSqlGenerator::class.qualifiedName +
            " at " + now().toString() + "\n\n\n"


    private fun getFile(prefix: String, definition: TopicDefinition): File {
        val filename = prefix + "__topic_" + definition.topicName + ".sql"
        return File(path + filename)
    }


}


