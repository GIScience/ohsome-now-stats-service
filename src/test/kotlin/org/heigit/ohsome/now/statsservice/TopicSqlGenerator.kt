package org.heigit.ohsome.now.statsservice

import org.heigit.ohsome.now.statsservice.topic.*
import org.junit.jupiter.api.Test
import java.io.File
import java.time.Instant.now
import java.time.temporal.ChronoUnit.HOURS
import java.time.temporal.ChronoUnit.SECONDS


class TopicSqlGenerator {

    private val fourHoursLater = now()
        .plus(4, HOURS)
        .truncatedTo(SECONDS)
        .toString()

    private val path = "sql_topics_generated/"


    @Test
    fun `create topic SQL for all topics`() = topics
        .values
        .forEach(::writeSql)


    private fun writeSql(definition: TopicDefinition) {
        writeDDLs(definition, "int")
        writeInserts(definition, "int")
    }


    private fun writeDDLs(definition: TopicDefinition, stage: String) = writeSqlToFile("DDL", definition, stage) {
        createDDLCommands(definition, stage)
    }


    private fun writeInserts(definition: TopicDefinition, stage: String) = writeSqlToFile("INSERT", definition, stage) {
        createInsertCommands(definition, stage)
    }


    private fun writeSqlToFile(prefix: String, definition: TopicDefinition, stage: String, command: () -> String) = this
        .getFile(prefix, definition, stage)
        .writeText(command())


    private fun createDDLCommands(definition: TopicDefinition, stage: String) = comment() +
            createTableDDL(definition, stage) + "\n\n" +
            createMvDdl(definition, fourHoursLater, stage)


    private fun createInsertCommands(definition: TopicDefinition, stage: String) = comment() +
            createInsertStatement(definition, fourHoursLater, stage)


    private fun comment() = "-- generated by " + TopicSqlGenerator::class.qualifiedName +
            " at " + now().toString() + "\n\n\n"


    private fun getFile(prefix: String, definition: TopicDefinition, stage: String): File {
        val filename = stage + "_" + prefix + "__topic_" + definition.topicName + ".sql"
        return File(path + filename)
    }


}


